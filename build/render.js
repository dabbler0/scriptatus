// Generated by CoffeeScript 1.12.3
(function() {
  var ARM_WIDTH, Character, DEFAULT_COLORS, FRAME_RATE, RenderContext, Vector, main;

  Vector = (function() {
    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.plus = function(o) {
      return new Vector(this.x + o.x, this.y + o.y);
    };

    Vector.prototype.minus = function(o) {
      return new Vector(this.x - o.x, this.y - o.y);
    };

    Vector.prototype.times = function(s) {
      return new Vector(this.x * s, this.y * s);
    };

    Vector.prototype.divided_by = function(s) {
      return new Vector(this.x / s, this.y / s);
    };

    Vector.prototype.magnitude = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.unit = function() {
      return this.divided_by(this.magnitude());
    };

    Vector.prototype.dir = function() {
      return Math.atan2(this.y, this.x);
    };

    Vector.prototype.plus_inplace = function(o) {
      this.x += o.x;
      this.y += o.y;
    };

    Vector.prototype.minus_inplace = function(o) {
      this.x -= o.x;
      this.y -= o.y;
    };

    Vector.prototype.times_inplace = function(s) {
      this.x *= s;
      this.y *= s;
    };

    Vector.prototype.divided_by_inplace = function(s) {
      this.x /= s;
      this.y /= s;
    };

    Vector.prototype.unit_inplace = function() {
      return this.divided_by_inplace(this.magnitude());
    };

    return Vector;

  })();

  Vector.fromPolar = function(magnitude, angle) {
    return new Vector(Math.cos(angle) * magnitude, Math.sin(angle) * magnitude);
  };

  RenderContext = (function() {
    function RenderContext(canvas1, ctx1) {
      this.canvas = canvas1;
      this.ctx = ctx1;
    }

    return RenderContext;

  })();

  Character = (function() {
    function Character(height, radius, pos, colors) {
      this.height = height;
      this.radius = radius;
      this.pos = pos != null ? pos : new Vector(0, 0);
      this.colors = colors != null ? colors : DEFAULT_COLORS;
      this.velocity = new Vector(0, 0);
      this.dir = 0;
    }

    Character.prototype.tick = function() {
      return this.pos.plus_inplace(this.velocity);
    };

    Character.prototype.heart = function() {
      return this.pos.minus(new Vector(0, this.height * 3 / 4));
    };

    Character.prototype.render_pants = function(render_context) {
      var canvas, ctx, left_leg_center, left_leg_corner, pants_height, pants_width, right_leg_center, right_leg_corner;
      ctx = render_context.ctx, canvas = render_context.canvas;
      pants_height = this.height / 2;
      pants_width = this.radius / 2;
      left_leg_center = this.pos.minus(new Vector(pants_width, 0));
      right_leg_center = this.pos.pus(new Vector(pants_width, 0));
      left_leg_corner = left_leg_center.minus(new Vector(pants_width / 2, pants_height));
      right_leg_corner = right_leg_center.minus(new Vector(pants_width / 2, pants_height));
      ctx.fillStyle = this.colors.pants;
      ctx.fillRect(left_leg_corner.x, left_leg_corner.y, pants_width, pants_height);
      return ctx.fillRect(right_leg_corner.x, right_leg_corner.y, pants_width, pants_height);
    };

    Character.prototype.render_torso = function(render_context) {
      var canvas, ctx, torso_corner, torso_height, torso_width;
      ctx = render_context.ctx, canvas = render_context.canvas;
      torso_height = this.height / 2;
      torso_width = this.radius * 2;
      torso_corner = this.pos.minus(new Vector(this.height, this.radius));
      ctx.fillStyle = this.colors.torso;
      return ctx.fillRect(torso_corner.x, torso_corner.y, torso_height, torso_width);
    };

    Character.prototype.left_arm_vector = function() {
      return Vector.fromPolar(this.radius, this.dir);
    };

    Character.prototype.right_arm_vector = function() {
      return Vector.fromPolar(this.radius, this.dir);
    };

    Character.prototype.render_arms_and_torso = function(render_context) {
      var arm_center, back_arm, back_arm_dest, canvas, ctx, front_arm, front_arm_dest, left_arm, left_arm_dest, right_arm, right_arm_dest;
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.lineWidth = 5;
      ctx.strokeStyle = this.colors.arms;
      arm_center = this.heart();
      left_arm = arm_center.plus(Vector.fromPolar(this.radius, this.dir + Math.PI / 2));
      right_arm = arm_center.minus(Vector.fromPolar(this.radius, this.dir - Math.PI / 2));
      left_arm_dest = left_arm.plus(this.left_arm_vector());
      right_arm_dest = right_arm.plus(this.right_arm_vector());
      if (left_arm.y < right_arm.y) {
        back_arm = left_arm;
        back_arm_dest = left_arm_dest;
        front_arm = right_arm;
        front_arm_dest = right_arm_dest;
      } else {
        back_arm = right_arm;
        back_arm_dest = right_arm_dest;
        front_arm = left_arm;
        front_arm_dest = left_arm_dest;
      }
      ctx.beginPath();
      ctx.moveTo(back_arm.x, back_arm.y);
      ctx.lineTo(back_arm_dest.x, back_arm_dest.y);
      ctx.stroke();
      this.render_torso();
      ctx.beginPath();
      ctx.moveTo(front_arm.x, front_arm.y);
      ctx.lineTo(front_arm_dest.x, front_arm_dest.y);
      return ctx.stroke();
    };

    Character.prototype.render_head = function(render_context) {};

    Character.prototype.render = function(render_context) {
      this.render_pants(render_context);
      this.render_arms_and_torso(render_context);
      return this.render_head(render_context);
    };

    return Character;

  })();

  main = function() {
    var canvas, ctx, main_character, render_context, tick;
    canvas = document.getElementById('viewport');
    ctx = canvas.getContext('2d');
    render_context = new RenderContext(canvas, ctx);
    main_character = new Character(100, 20);
    main_character.pos = new Vector(canvas.width / 2, canvas.height / 2);
    canvas.addEventListener('mousemove', function(event) {
      var dir, event_pos;
      event_pos = new Vector(event.offsetX, event.offsetY);
      dir = event_pos.minus(main_character.pos).dir();
      return main_character.dir = dir;
    });
    tick = function() {
      setTimeout(tick, 1000 / FRAME_RATE);
      main_character.tick();
      return main_character.render(render_context);
    };
    return tick();
  };

  DEFAULT_COLORS = {
    pants: 'tan',
    torso: 'brown',
    arms: 'tan',
    head: 'ivory'
  };

  ARM_WIDTH = 5;

  FRAME_RATE = 100;

  main();

}).call(this);
