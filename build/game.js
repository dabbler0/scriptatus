// Generated by CoffeeScript 1.12.3
(function() {
  var ANGULAR_FRICTION, ARCHER_AI, ARROW_LENGTH, ARROW_VELOCITY, AiWorker, Archer, BOARD_HEIGHT, BOARD_WIDTH, BOWSTRING_COLOR, BOW_COLOR, BOW_HEIGHT, BOW_THICKNESS, Bullet, CURRENT_MODE, CURRENT_USER, Character, DAGGER_COLOR, DAGGER_LENGTH, DAGGER_LIFETIME, DAGGER_VELOCITY, DEFAULT_COLORS, DUMBO, FRAME_RATE, FRICTION, IMAGE_URLS, KNIGHT_AI, Knight, MAGE_AI, Mage, NECK_HEIGHT, Particle, ROGUE_AI, RenderContext, Rogue, SCRIPTS, SHIELD_RATIO, SPELL_RADIUS, Script, Spell, TORSO_PROPORTION, Vector, WALKING_PERIOD, WALKING_RATIO, WALL_HEIGHT, Wall, ace_editor, allied_positions, character_templates, class_elements, context_menu, contexted_element, contexted_index, create_ai_from_template, currently_editing, database, edit_element, edit_screen, edit_tab_elements, element, ending_syllables, enemy_currently_editing, enemy_prototype_list, enemy_script_elements, enemy_selected_element, enemy_selected_tab_element, enemy_tab_elements, enemy_templates, fn, fn1, generate_name, github_provider, google_provider, i, infill_object, instantiate_character, j, k, key_codes, keysdown, load_scripts, load_settings, login_screen, lose_screen, main_menu, name_syllables, play_game, prototype_list, registration_screen, rerender_enemy_tabs, rerender_tabs, save, save_settings, save_settings_timeout, save_timeout, script_elements, selected_class, selected_class_element, selected_element, selected_tab_element, sign, update_prototype_list, win_screen, wrap_angle,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  wrap_angle = function(ang) {
    return (modulo(ang + Math.PI, 2 * Math.PI)) - Math.PI;
  };

  sign = function(x) {
    if (x === 0) {
      return 0;
    } else {
      return x / Math.abs(x);
    }
  };

  infill_object = function(dest, src) {
    var key, val;
    for (key in src) {
      val = src[key];
      if (!(key in dest)) {
        dest[key] = val;
      }
    }
    return dest;
  };

  Vector = (function() {
    function Vector(x1, y) {
      this.x = x1;
      this.y = y;
    }

    Vector.prototype.plus = function(o) {
      return new Vector(this.x + o.x, this.y + o.y);
    };

    Vector.prototype.minus = function(o) {
      return new Vector(this.x - o.x, this.y - o.y);
    };

    Vector.prototype.times = function(s) {
      return new Vector(this.x * s, this.y * s);
    };

    Vector.prototype.divided_by = function(s) {
      return new Vector(this.x / s, this.y / s);
    };

    Vector.prototype.magnitude = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.unit = function() {
      return this.divided_by(this.magnitude());
    };

    Vector.prototype.dir = function() {
      return Math.atan2(this.y, this.x);
    };

    Vector.prototype.copy = function(o) {
      this.x = o.x;
      return this.y = o.y;
    };

    Vector.prototype.clone = function() {
      return new Vector(this.x, this.y);
    };

    Vector.prototype.plus_inplace = function(o) {
      this.x += o.x;
      this.y += o.y;
    };

    Vector.prototype.minus_inplace = function(o) {
      this.x -= o.x;
      this.y -= o.y;
    };

    Vector.prototype.times_inplace = function(s) {
      this.x *= s;
      this.y *= s;
    };

    Vector.prototype.divided_by_inplace = function(s) {
      this.x /= s;
      this.y /= s;
    };

    Vector.prototype.unit_inplace = function() {
      return this.divided_by_inplace(this.magnitude());
    };

    return Vector;

  })();

  Vector.fromPolar = function(magnitude, angle) {
    return new Vector(Math.cos(angle) * magnitude, Math.sin(angle) * magnitude);
  };

  RenderContext = (function() {
    function RenderContext(canvas1, ctx1) {
      this.canvas = canvas1;
      this.ctx = ctx1;
      this.stone_asset = this.ctx.createPattern(document.getElementById('stone-asset'), 'repeat');
      this.stone_top_asset = this.ctx.createPattern(document.getElementById('stone-top-asset'), 'repeat');
    }

    return RenderContext;

  })();

  AiWorker = (function() {
    function AiWorker(character1, program) {
      var blob;
      this.character = character1;
      blob = new Blob([program], {
        type: 'text/javascript'
      });
      this.worker = new Worker(URL.createObjectURL(blob));
      this.ready = true;
      this.worker.onmessage = (function(_this) {
        return function(e) {
          e = e.data;
          switch (e.type) {
            case 'ready':
              return _this.ready = true;
            case 'turn':
              return _this.character.angular_dir = e.dir;
            case 'move':
              _this.character.movement_dir = e.dir;
              return _this.character.moving = true;
            case 'strike':
              return _this.character.strike();
            case 'start_shooting':
              return _this.character.start_shooting();
            case 'stop_shooting':
              return _this.character.stop_shooting();
            case 'nock':
              return _this.character.nock();
            case 'loose':
              return _this.character.loose();
            case 'cast':
              return _this.character.cast(new Vector(e.target.x, e.target.y));
            case 'cancel_casting':
              return _this.character.cancel_casting();
          }
        };
      })(this);
    }

    AiWorker.prototype.tick = function(info) {
      if (this.ready) {
        this.worker.postMessage({
          characters: info.characters.filter((function(_this) {
            return function(x) {
              return x.health > 0 && x !== _this.character;
            };
          })(this)).map((function(_this) {
            return function(x) {
              return x.create_reader(_this.character.allegiance);
            };
          })(this)),
          bullets: info.bullets.filter(function(x) {
            return x.alive;
          }).map(function(x) {
            return x.create_reader();
          }),
          spells: info.spells.filter(function(x) {
            return x.alive;
          }).map(function(x) {
            return x.create_reader();
          }),
          walls: info.walls.map(function(x) {
            return x.create_reader();
          }),
          main_character: this.character.create_reader(this.character.allegiance)
        });
        return this.ready = false;
      }
    };

    AiWorker.prototype.terminate = function() {
      return this.worker.terminate();
    };

    return AiWorker;

  })();

  Character = (function() {
    function Character(height, radius, pos1, allegiance1, ai, colors) {
      this.height = height;
      this.radius = radius;
      this.pos = pos1 != null ? pos1 : new Vector(0, 0);
      this.allegiance = allegiance1;
      this.ai = ai != null ? ai : DUMBO;
      this.colors = colors != null ? colors : {};
      this.velocity = new Vector(0, 0);
      this.hitbox_radius = this.radius * 1.5;
      this.ai_runner = new AiWorker(this, create_ai_from_template(this.ai));
      this.player_controlled = false;
      infill_object(this.colors, DEFAULT_COLORS);
      this.dir = 0;
      this.age = 0;
      this.movement_dir = null;
      this.moving = false;
      this.walking_acceleration = 0.3;
      this.angular_dir = 0;
      this.angular_velocity = 0;
      this.angular_acceleration = 0.03;
      this.health = this.max_health = 100;
    }

    Character.prototype.create_reader = function(allegiance) {
      return {
        pos: this.pos,
        dir: this.dir,
        velocity: this.velocity,
        angular_velocity: this.angular_velocity,
        health: this.health,
        player_controlled: this.player_controlled,
        allegiance: this.allegiance === allegiance,
        "class": this.type_string
      };
    };

    Character.prototype.damage = function(damage) {
      this.health -= damage;
      return this.health = Math.max(this.health, 0);
    };

    Character.prototype.tick = function(info) {
      if (!this.player_controlled) {
        this.ai_runner.tick(info);
      }
      this.age += 1;
      if (this.moving) {
        this.velocity.plus_inplace(Vector.fromPolar(this.walking_acceleration, this.movement_dir));
      }
      this.angular_velocity *= ANGULAR_FRICTION;
      this.angular_velocity += this.angular_acceleration * Math.max(-1, Math.min(1, this.angular_dir));
      this.dir += this.angular_velocity;
      this.dir = wrap_angle(this.dir);
      this.pos.plus_inplace(this.velocity);
      this.velocity.times_inplace(FRICTION);
    };

    Character.prototype.heart = function() {
      return this.pos.minus(new Vector(0, this.height * 3 / 4));
    };

    Character.prototype.render_pants = function(render_context) {
      var canvas, ctx, left_leg_center, left_pants_height, pants_height, pants_width, right_leg_center, right_pants_height;
      ctx = render_context.ctx, canvas = render_context.canvas;
      pants_height = this.height * (1 - TORSO_PROPORTION);
      right_pants_height = pants_height;
      left_pants_height = pants_height;
      if (this.moving) {
        if (Math.floor(this.age / WALKING_PERIOD) % 2 === 0) {
          right_pants_height *= WALKING_RATIO;
        } else {
          left_pants_height *= WALKING_RATIO;
        }
      }
      pants_width = this.radius / 2;
      right_leg_center = this.pos.minus(new Vector(pants_width, pants_height));
      left_leg_center = this.pos.minus(new Vector(-pants_width, pants_height));
      ctx.strokeStyle = this.colors.pants;
      ctx.lineWidth = pants_width;
      ctx.lineCap = 'round';
      ctx.beginPath();
      ctx.moveTo(right_leg_center.x, right_leg_center.y);
      ctx.lineTo(right_leg_center.x, right_leg_center.y + right_pants_height);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(left_leg_center.x, left_leg_center.y);
      ctx.lineTo(left_leg_center.x, left_leg_center.y + left_pants_height);
      return ctx.stroke();
    };

    Character.prototype.render_torso = function(render_context) {
      var canvas, ctx, torso_bottom_center, torso_corner, torso_height, torso_top_center, torso_width;
      ctx = render_context.ctx, canvas = render_context.canvas;
      torso_height = this.height * TORSO_PROPORTION;
      torso_width = this.radius * 2;
      torso_corner = this.pos.minus(new Vector(this.radius, this.height));
      torso_bottom_center = this.pos.minus(new Vector(0, this.height - torso_height));
      torso_top_center = this.pos.minus(new Vector(0, this.height));
      ctx.fillStyle = this.colors.torso;
      ctx.fillRect(torso_corner.x, torso_corner.y, torso_width, torso_height);
      ctx.beginPath();
      ctx.arc(torso_bottom_center.x, torso_bottom_center.y, this.radius, 0, 2 * Math.PI);
      ctx.fill();
      ctx.fillStyle = this.colors.torso_top;
      ctx.beginPath();
      ctx.arc(torso_top_center.x, torso_top_center.y, this.radius, 0, 2 * Math.PI);
      return ctx.fill();
    };

    Character.prototype.left_arm_vector = function() {
      return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
    };

    Character.prototype.right_arm_vector = function() {
      return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
    };

    Character.prototype.render_left_item = function() {};

    Character.prototype.render_right_item = function() {};

    Character.prototype.render_arms_and_torso = function(render_context) {
      var arm_center, back_arm, back_arm_dest, canvas, ctx, front_arm, front_arm_dest, left_arm, left_arm_dest, right_arm, right_arm_dest;
      ctx = render_context.ctx, canvas = render_context.canvas;
      arm_center = this.pos.minus(new Vector(0, this.height));
      right_arm = arm_center.plus(Vector.fromPolar(this.radius, this.dir + Math.PI / 2));
      left_arm = arm_center.plus(Vector.fromPolar(this.radius, this.dir - Math.PI / 2));
      right_arm_dest = right_arm.plus(this.right_arm_vector());
      left_arm_dest = left_arm.plus(this.left_arm_vector());
      if (right_arm.y < left_arm.y) {
        back_arm = right_arm;
        back_arm_dest = right_arm_dest;
        front_arm = left_arm;
        front_arm_dest = left_arm_dest;
      } else {
        back_arm = left_arm;
        back_arm_dest = left_arm_dest;
        front_arm = right_arm;
        front_arm_dest = right_arm_dest;
      }
      if (Math.sin(this.dir) < 0) {
        if (left_arm === back_arm) {
          this.render_left_item(render_context, left_arm_dest);
          this.render_right_item(render_context, right_arm_dest);
        } else {
          this.render_right_item(render_context, right_arm_dest);
          this.render_left_item(render_context, left_arm_dest);
        }
      }
      ctx.strokeStyle = this.colors.arms;
      ctx.lineWidth = this.radius / 2;
      ctx.lineCap = 'round';
      ctx.beginPath();
      ctx.moveTo(back_arm.x, back_arm.y);
      ctx.lineTo(back_arm_dest.x, back_arm_dest.y);
      ctx.stroke();
      this.render_torso(render_context);
      this.render_head(render_context);
      ctx.strokeStyle = this.colors.arms;
      ctx.lineWidth = this.radius / 2;
      ctx.lineCap = 'round';
      ctx.beginPath();
      ctx.moveTo(front_arm.x, front_arm.y);
      ctx.lineTo(front_arm_dest.x, front_arm_dest.y);
      ctx.stroke();
      if (Math.sin(this.dir) >= 0) {
        if (left_arm === back_arm) {
          this.render_left_item(render_context, left_arm_dest);
          return this.render_right_item(render_context, right_arm_dest);
        } else {
          this.render_right_item(render_context, right_arm_dest);
          return this.render_left_item(render_context, left_arm_dest);
        }
      }
    };

    Character.prototype.render_hat = function() {};

    Character.prototype.render_head = function(render_context) {
      var canvas, ctx, head_center;
      ctx = render_context.ctx, canvas = render_context.canvas;
      head_center = this.pos.minus(new Vector(0, this.height + this.radius));
      ctx.fillStyle = this.colors.head;
      ctx.beginPath();
      ctx.arc(head_center.x, head_center.y, this.radius, 0, 2 * Math.PI);
      return ctx.fill();
    };

    Character.prototype.render_shadow = function(render_context) {
      var canvas, ctx;
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.globalAlpha = 0.5;
      ctx.fillStyle = '#000';
      ctx.beginPath();
      ctx.arc(this.pos.x, this.pos.y, this.hitbox_radius, 0, 2 * Math.PI);
      ctx.fill();
      return ctx.globalAlpha = 1;
    };

    Character.prototype.render = function(render_context) {
      this.render_shadow(render_context);
      this.render_pants(render_context);
      this.render_arms_and_torso(render_context);
      this.render_health_bar(render_context);
      return this.render_emblem(render_context);
    };

    Character.prototype.render_health_bar = function(render_context) {
      var canvas, ctx, pos;
      ctx = render_context.ctx, canvas = render_context.canvas;
      pos = this.pos.minus(new Vector(this.hitbox_radius, this.height + this.radius + 20));
      ctx.fillStyle = '#F00';
      ctx.fillRect(pos.x, pos.y, 3 * this.radius, 5);
      ctx.fillStyle = '#0F0';
      return ctx.fillRect(pos.x, pos.y, 3 * this.radius * this.health / this.max_health, 5);
    };

    Character.prototype.render_emblem = function(render_context) {
      var canvas, center, ctx, j, point, x;
      ctx = render_context.ctx, canvas = render_context.canvas;
      center = this.pos.minus(new Vector(this.hitbox_radius, this.height + this.radius + 20 - 2.5));
      if (this.allegiance) {
        ctx.fillStyle = '#FFF';
      } else {
        ctx.fillStyle = '#000';
      }
      ctx.beginPath();
      ctx.arc(center.x, center.y, 5, 0, 2 * Math.PI);
      ctx.fill();
      if (this.player_controlled) {
        ctx.fillStyle = '#0F0';
      } else if (this.allegiance) {
        ctx.fillStyle = '#00F';
      } else {
        ctx.fillStyle = '#F00';
      }
      ctx.beginPath();
      ctx.moveTo(center.x, center.y + 5);
      for (x = j = 1; j <= 3; x = ++j) {
        point = center.plus(Vector.fromPolar(5, x * Math.PI * 2 / 3 + Math.PI / 2));
        ctx.lineTo(point.x, point.y);
      }
      return ctx.fill();
    };

    return Character;

  })();

  Knight = (function(superClass) {
    extend(Knight, superClass);

    function Knight() {
      Knight.__super__.constructor.apply(this, arguments);
      this.type = Knight;
      this.type_string = 'knight';
      this.strike_age = 0;
      this.striking_forward = false;
      this.striking_sidways = false;
      this.walking_acceleration = 0.2;
      this.angular_acceleration = 0.04;
      this.colors.torso = '#78A';
      this.colors.torso_top = '#568';
      this.colors.head = '#AAF';
      this.health = this.max_health = 100;
    }

    Knight.prototype.create_reader = function() {
      var reader;
      reader = Knight.__super__.create_reader.apply(this, arguments);
      reader.strike_age = this.strike_age;
      reader.striking_forward = this.striking_forward;
      reader.striking_sideways = this.striking_sideways;
      return reader;
    };

    Knight.prototype.damage = function(damage) {
      if (this.striking_sidweays) {
        return this.health -= damage;
      } else if (this.striking_forward) {
        return this.health -= damage / 2;
      } else {
        return this.health -= damage / 6;
      }
    };

    Knight.prototype.tick = function() {
      Knight.__super__.tick.apply(this, arguments);
      if (this.striking_forward && this.age - this.strike_age > 10) {
        this.striking_forward = false;
        this.striking_sideways = true;
      }
      if (this.striking_sideways && this.age - this.strike_age > 60) {
        return this.striking_sideways = false;
      }
    };

    Knight.prototype.left_arm_vector = function() {
      if (this.striking_sideways) {
        return Vector.fromPolar(this.height * 0.3, -Math.PI / 4 * Math.min(1, (this.age - this.strike_age - 10) / 5) + this.dir).plus(new Vector(0, this.height / 4));
      } else {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
      }
    };

    Knight.prototype.right_arm_vector = function() {
      if (this.striking_forward) {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4 * (1 - (this.age - this.strike_age) / 10)));
      } else if (this.striking_sideways) {
        return Vector.fromPolar(this.height * 0.3, this.dir + Math.min(1, (this.age - this.strike_age - 10) / 5) * Math.PI / 2);
      } else {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
      }
    };

    Knight.prototype.render_left_item = function(render_context, position) {
      var canvas, corner, corners, ctx, j, len, shield_height, shield_starting_point, shield_top_center, shield_width;
      ctx = render_context.ctx, canvas = render_context.canvas;
      shield_width = this.radius * 2;
      shield_height = this.height * SHIELD_RATIO;
      shield_top_center = position.minus(new Vector(0, shield_height / 2));
      shield_starting_point = shield_top_center.minus(Vector.fromPolar(shield_width / 2, this.dir + Math.PI / 2));
      corners = [shield_starting_point, shield_starting_point.plus(Vector.fromPolar(shield_width, this.dir + Math.PI / 2)), shield_starting_point.plus(Vector.fromPolar(shield_width, this.dir + Math.PI / 2)).plus(new Vector(0, shield_height)), shield_starting_point.plus(new Vector(0, shield_height))];
      ctx.fillStyle = '#555';
      ctx.strokeStyle = '#888';
      ctx.lineWidth = 2;
      ctx.lineJoin = 'bevel';
      ctx.beginPath();
      ctx.moveTo(corners[0].x, corners[0].y);
      for (j = 0, len = corners.length; j < len; j++) {
        corner = corners[j];
        ctx.lineTo(corner.x, corner.y);
      }
      ctx.lineTo(corners[0].x, corners[0].y);
      ctx.fill();
      return ctx.stroke();
    };

    Knight.prototype.render_right_item = function(render_context, position) {
      var canvas, ctx, sword_dest;
      ctx = render_context.ctx, canvas = render_context.canvas;
      if (this.striking_forward) {
        sword_dest = position.plus(new Vector(0, -this.height / 2 * (1 - (this.age - this.strike_age) / 10))).plus(Vector.fromPolar(this.radius + 1.5 * (this.age - this.strike_age) / 10 * this.radius, this.dir));
      } else if (this.striking_sideways) {
        sword_dest = position.plus(Vector.fromPolar(this.radius * 2.5, this.dir + Math.min(1, (this.age - this.strike_age - 10) / 5) * Math.PI / 2));
      } else {
        sword_dest = position.plus(new Vector(0, -this.height / 2)).plus(Vector.fromPolar(this.radius, this.dir));
      }
      ctx.strokeStyle = '#999';
      ctx.lineWidth = 5;
      ctx.beginPath();
      ctx.moveTo(position.x, position.y);
      ctx.lineTo(sword_dest.x, sword_dest.y);
      return ctx.stroke();
    };

    Knight.prototype.strike = function() {
      if (!(this.striking_forward || this.striking_sideways)) {
        this.strike_age = this.age;
        return this.striking_forward = true;
      }
    };

    return Knight;

  })(Character);

  SPELL_RADIUS = 100;

  Particle = (function() {
    function Particle(center, gen_proportion) {
      this.pos = center.plus(Vector.fromPolar(Math.random() * SPELL_RADIUS * gen_proportion, Math.random() * 2 * Math.PI));
      this.radius = ((Math.random() + 0.5) * 10 + 10) * gen_proportion;
      this.height = 0;
      this.speed = Math.random() * 10;
      this.age = 0;
      this.r = 255;
      this.g = 255;
      this.b = 255;
    }

    Particle.prototype.tick = function() {
      this.age += 1;
      this.height += this.speed;
      this.r *= 0.95 + Math.random() * 0.05;
      this.g *= 0.8;
      return this.b *= 0.5;
    };

    Particle.prototype.render = function(render_context) {
      var canvas, ctx;
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.fillStyle = "rgb(" + (Math.round(this.r)) + ", " + (Math.round(this.g)) + ", " + (Math.round(this.b)) + ")";
      ctx.beginPath();
      ctx.arc(this.pos.x, this.pos.y - this.height, this.radius / Math.sqrt(this.age), 0, 2 * Math.PI);
      return ctx.fill();
    };

    return Particle;

  })();

  Spell = (function() {
    function Spell() {
      this.pos = null;
      this.age = 0;
      this.burning = false;
      this.alive = false;
      this.orientation = 0;
      this.particles = [];
    }

    Spell.prototype.create_reader = function() {
      return {
        pos: this.pos,
        age: this.age,
        burning: this.burning
      };
    };

    Spell.prototype.reset = function(position) {
      this.pos = position;
      this.age = 0;
      this.alive = true;
      this.burning = false;
      this.orientation = Math.random() * 2 * Math.PI;
      return this.particles = [];
    };

    Spell.prototype.tick = function() {
      var age_proportion, j, ref, results;
      if (!this.alive) {
        return;
      }
      this.age += 1;
      if (this.age > 270) {
        this.alive = false;
        return this.burning = false;
      } else if (this.age > 90) {
        this.burning = true;
        this.particles.forEach(function(p) {
          if (p.radius / Math.sqrt(p.age) > 4) {
            return p.tick();
          }
        });
        age_proportion = Math.sqrt(1 - (this.age - 90) / 180);
        results = [];
        for (j = 1, ref = Math.floor((Math.random() * 4 + 3) * age_proportion); 1 <= ref ? j < ref : j > ref; 1 <= ref ? j++ : j--) {
          results.push(this.particles.push(new Particle(this.pos, age_proportion)));
        }
        return results;
      }
    };

    Spell.prototype.render = function(render_context) {
      var canvas, ctx, excess, excess_point, i, j, k, last_point, len, limit, new_pos, next_point, particle, proportion, ref, ref1;
      if (!this.alive) {
        return;
      }
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.strokeStyle = '#F00';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.arc(this.pos.x, this.pos.y, SPELL_RADIUS, 0, 2 * Math.PI);
      if (this.burning) {
        ctx.globalAlpha = 0.8 * (1 - (this.age - 90) / 180);
        ctx.fillStyle = '#000';
        ctx.fill();
        ctx.globalAlpha = 0.8;
        ref = this.particles;
        for (j = 0, len = ref.length; j < len; j++) {
          particle = ref[j];
          if (particle.radius / Math.sqrt(particle.age) > 4) {
            particle.render(render_context);
          }
        }
        return ctx.globalAlpha = 1;
      } else {
        ctx.stroke();
        ctx.beginPath();
        new_pos = this.pos.plus(Vector.fromPolar(SPELL_RADIUS, this.orientation));
        ctx.moveTo(new_pos.x, new_pos.y);
        proportion = this.age / 90;
        limit = Math.floor(proportion * 6);
        excess = proportion * 6 - limit;
        for (i = k = 0, ref1 = limit; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
          new_pos = this.pos.plus(Vector.fromPolar(SPELL_RADIUS, i * Math.PI * 4 / 5 + this.orientation));
          ctx.lineTo(new_pos.x, new_pos.y);
        }
        last_point = this.pos.plus(Vector.fromPolar(SPELL_RADIUS, limit * Math.PI * 4 / 5 + this.orientation));
        next_point = this.pos.plus(Vector.fromPolar(SPELL_RADIUS, (limit + 1) * Math.PI * 4 / 5 + this.orientation));
        excess_point = last_point.times(1 - excess).plus(next_point.times(excess));
        ctx.lineTo(excess_point.x, excess_point.y);
        return ctx.stroke();
      }
    };

    return Spell;

  })();

  Mage = (function(superClass) {
    extend(Mage, superClass);

    function Mage() {
      Mage.__super__.constructor.apply(this, arguments);
      this.type = Mage;
      this.type_string = 'mage';
      this.colors.torso = '#53F';
      this.colors.torso_top = '#217';
      this.colors.arms = this.colors.pants = '#217';
      this.walking_acceleration = 0.15;
      this.angular_acceleration = 0.01;
      this.casting = false;
      this.casting_age = 0;
      this.spell = new Spell();
    }

    Mage.prototype.damage = function() {
      Mage.__super__.damage.apply(this, arguments);
      if (this.health <= 0) {
        return this.spell.alive = false;
      }
    };

    Mage.prototype.tick = function() {
      Mage.__super__.tick.apply(this, arguments);
      if (this.casting && !this.spell.alive) {
        this.casting = false;
        this.walking_acceleration = 0.15;
      }
    };

    Mage.prototype.create_reader = function() {
      var reader;
      reader = Mage.__super__.create_reader.apply(this, arguments);
      reader.casting = this.casting;
      reader.casting_age = this.casting_age;
      return reader;
    };

    Mage.prototype.cast = function(position) {
      if (this.spell.burning || this.casting || this.health <= 0) {
        return;
      }
      this.casting = true;
      this.casting_age = this.age;
      this.walking_acceleration = 0;
      this.spell.reset(position);
      return this.spell;
    };

    Mage.prototype.cancel_casting = function() {
      this.casting = false;
      this.walking_acceleration = 0.15;
      if (!this.spell.burning) {
        return this.spell.alive = false;
      }
    };

    Mage.prototype.left_arm_vector = function() {
      var proportion;
      if (this.casting) {
        proportion = Math.min(1, (this.age - this.casting_age) / 60);
        return Vector.fromPolar(this.height * 0.3 * (1 - proportion), this.dir).plus(new Vector(0, this.height * (0.25 + 0.25 * proportion)));
      } else {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
      }
    };

    Mage.prototype.render_hat = function(render_context, position) {
      var canvas, ctx, left, right, top;
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.fillStyle = '#006';
      left = position.plus(new Vector(-this.radius - 1, 0));
      right = position.plus(new Vector(this.radius + 1, 0));
      top = position.minus(new Vector(0, this.radius * 3));
      ctx.beginPath();
      ctx.arc(top.x, top.y, top.minus(left).magnitude(), right.minus(top).dir(), left.minus(top).dir());
      ctx.lineTo(top.x, top.y);
      return ctx.fill();
    };

    Mage.prototype.right_arm_vector = function() {
      var proportion;
      if (this.casting) {
        proportion = Math.min(1, (this.age - this.casting_age) / 60);
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height * (0.25 - 0.5 * proportion)));
      } else {
        return Mage.__super__.right_arm_vector.apply(this, arguments);
      }
    };

    Mage.prototype.render_right_item = function(render_context, position) {
      var bottom_position, canvas, ctx, top_position;
      top_position = position.minus(new Vector(0, this.height / 2));
      bottom_position = position.plus(new Vector(0, this.height / 2));
      canvas = render_context.canvas, ctx = render_context.ctx;
      ctx.strokeStyle = 'brown';
      ctx.lineWidth = 5;
      ctx.beginPath();
      ctx.moveTo(top_position.x, top_position.y);
      ctx.lineTo(bottom_position.x, bottom_position.y);
      ctx.stroke();
      ctx.fillStyle = 'red';
      ctx.beginPath();
      ctx.arc(top_position.x, top_position.y, 5, 0, 2 * Math.PI);
      return ctx.fill();
    };

    return Mage;

  })(Character);

  BOW_HEIGHT = 20;

  BOW_COLOR = 'brown';

  BOWSTRING_COLOR = 'white';

  BOW_THICKNESS = 5;

  ARROW_VELOCITY = 10;

  ARROW_LENGTH = 25;

  Archer = (function(superClass) {
    extend(Archer, superClass);

    function Archer() {
      Archer.__super__.constructor.apply(this, arguments);
      this.type = Archer;
      this.type_string = 'archer';
      this.loading = false;
      this.loaded = false;
      this.loading_age = 0;
      this.bullet_to_return = null;
      this.colors.torso = 'green';
      this.colors.torso_top = 'darkgreen';
      this.colors.arms = this.colors.pants = 'goldenrod';
    }

    Archer.prototype.create_reader = function() {
      var reader;
      reader = Archer.__super__.create_reader.apply(this, arguments);
      reader.loading = this.loading;
      reader.loaded = this.loaded;
      reader.loading_age = this.loading_age;
      reader.ready_to_shoot = this.age - this.loading_age > 90 && this.loaded;
      return reader;
    };

    Archer.prototype.tick = function() {
      var bullet;
      Archer.__super__.tick.apply(this, arguments);
      if (this.loading && this.age - this.loading_age > 30) {
        this.loading = false;
        this.loaded = true;
      }
      if (this.bullet_to_return) {
        bullet = this.bullet_to_return;
        this.bullet_to_return = null;
        return bullet;
      }
    };

    Archer.prototype.nock = function() {
      if (!(this.loading || this.loaded)) {
        this.loading = true;
        this.loading_age = this.age;
        return this.walking_acceleration = 0.15;
      }
    };

    Archer.prototype.loose = function() {
      this.loading = false;
      this.walking_acceleration = 0.3;
      if (this.age - this.loading_age > 90 && this.loaded) {
        this.loaded = false;
        this.bullet_to_return = new Bullet(this.pos.plus(Vector.fromPolar(this.radius + ARROW_LENGTH / 2, this.dir)), Vector.fromPolar(ARROW_VELOCITY, this.dir), this.height, ARROW_LENGTH, 90, 'brown', 50);
      }
      this.loaded = false;
    };

    Archer.prototype.render_hat = function(render_context, position) {
      var canvas, ctx, left, right, top;
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.fillStyle = 'darkgreen';
      left = position.plus(new Vector(-this.radius - 2, -2));
      right = position.plus(new Vector(this.radius + 2, -2));
      top = position.minus(new Vector(0, this.radius * 1.5));
      ctx.beginPath();
      ctx.arc(top.x, top.y, top.minus(left).magnitude(), right.minus(top).dir(), left.minus(top).dir());
      ctx.lineTo(top.x, top.y);
      return ctx.fill();
    };

    Archer.prototype.right_arm_vector = function() {
      var proportion;
      if (this.loading) {
        proportion = Math.min(1, (this.age - this.loading_age) / 30);
        return Vector.fromPolar(this.height * (0.3 + 0.1 * proportion), this.dir).plus(new Vector(0, this.height / 4 * (1 - proportion))).plus(Vector.fromPolar(this.radius * proportion, this.dir - Math.PI / 2));
      } else if (this.loaded) {
        proportion = Math.min(1, (this.age - this.loading_age - 30) / 60);
        return Vector.fromPolar(this.height * 0.4 * (1 - proportion), this.dir).plus(Vector.fromPolar(this.radius * (1 - proportion), this.dir - Math.PI / 2));
      } else {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
      }
    };

    Archer.prototype.left_arm_vector = function() {
      var proportion;
      if (this.loading || this.loaded) {
        proportion = Math.min(1, (this.age - this.loading_age) / 30);
        return Vector.fromPolar(this.height * (0.3 + 0.1 * proportion), this.dir).plus(new Vector(0, this.height / 4 * (1 - proportion))).plus(Vector.fromPolar(this.radius * proportion, this.dir + Math.PI / 2));
      } else {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4));
      }
    };

    Archer.prototype.render_left_item = function(render_context, position) {
      var bottom_dest, canvas, ctx, proportion, top_dest;
      canvas = render_context.canvas, ctx = render_context.ctx;
      if (this.loaded) {
        proportion = Math.min(1, (this.age - this.loading_age - 30) / 60);
        top_dest = position.minus(new Vector(0, BOW_HEIGHT)).minus(Vector.fromPolar(5 * (1 + proportion), this.dir));
        bottom_dest = position.plus(new Vector(0, BOW_HEIGHT)).minus(Vector.fromPolar(5 * (1 + proportion), this.dir));
      } else {
        top_dest = position.minus(new Vector(0, BOW_HEIGHT)).minus(Vector.fromPolar(5, this.dir));
        bottom_dest = position.plus(new Vector(0, BOW_HEIGHT)).minus(Vector.fromPolar(5, this.dir));
      }
      ctx.strokeStyle = BOW_COLOR;
      ctx.lineWidth = BOW_THICKNESS;
      ctx.beginPath();
      ctx.moveTo(top_dest.x, top_dest.y);
      ctx.lineTo(position.x, position.y);
      ctx.lineTo(bottom_dest.x, bottom_dest.y);
      return ctx.stroke();
    };

    return Archer;

  })(Character);

  Bullet = (function() {
    function Bullet(pos1, velocity, height, length1, lifetime, color, damage1) {
      this.pos = pos1;
      this.velocity = velocity;
      this.height = height;
      this.length = length1;
      this.lifetime = lifetime;
      this.color = color;
      this.damage = damage1 != null ? damage1 : 5;
      this.alive = true;
      this.age = 0;
    }

    Bullet.prototype.create_reader = function() {
      return {
        pos: this.pos,
        velocity: this.velocity,
        height: this.height,
        length: this.length,
        lifetime: this.lifetime,
        age: this.age,
        damage: this.damage
      };
    };

    Bullet.prototype.tick = function() {
      if (!this.alive) {
        return;
      }
      this.age += 1;
      this.pos.plus_inplace(this.velocity);
      if (this.age > this.lifetime) {
        this.alive = false;
      }
    };

    Bullet.prototype.render = function(render_context) {
      var begin, canvas, ctx, end;
      if (!this.alive) {
        return;
      }
      ctx = render_context.ctx, canvas = render_context.canvas;
      ctx.strokeStyle = this.color;
      ctx.lineWidth = 5;
      begin = this.pos.minus(Vector.fromPolar(this.length / 2, this.velocity.dir()));
      end = this.pos.plus(Vector.fromPolar(this.length / 2, this.velocity.dir()));
      ctx.beginPath();
      ctx.moveTo(begin.x, begin.y - this.height);
      ctx.lineTo(end.x, end.y - this.height);
      ctx.stroke();
      ctx.strokeStyle = '#000';
      ctx.lineWidth = 5;
      ctx.globalAlpha = 0.5;
      ctx.beginPath();
      ctx.moveTo(begin.x, begin.y);
      ctx.lineTo(end.x, end.y);
      ctx.stroke();
      return ctx.globalAlpha = 1;
    };

    return Bullet;

  })();

  DAGGER_LENGTH = 10;

  DAGGER_COLOR = '#888';

  DAGGER_LIFETIME = 10;

  DAGGER_VELOCITY = 2;

  Rogue = (function(superClass) {
    extend(Rogue, superClass);

    function Rogue() {
      Rogue.__super__.constructor.apply(this, arguments);
      this.type = Rogue;
      this.type_string = 'rogue';
      this.shooting = false;
      this.last_shot = 0;
      this.colors.arms = this.colors.pants = '#440';
      this.colors.torso = '#550';
      this.colors.torso_top = '#220';
      this.walking_acceleration = 0.5;
    }

    Rogue.prototype.create_reader = function() {
      var reader;
      reader = Rogue.__super__.create_reader.apply(this, arguments);
      reader.shooting = this.shooting;
      reader.last_shot = this.last_shot;
      return reader;
    };

    Rogue.prototype.tick = function() {
      Rogue.__super__.tick.apply(this, arguments);
      if (this.shooting && this.age - this.last_shot > 10) {
        this.last_shot = this.age;
        return new Bullet(this.pos.plus(Vector.fromPolar(this.radius * 2 + DAGGER_LENGTH, this.dir)), Vector.fromPolar(DAGGER_VELOCITY, this.dir), this.height / 2, DAGGER_LENGTH, DAGGER_LIFETIME, DAGGER_COLOR, 10);
      }
    };

    Rogue.prototype.start_shooting = function() {
      return this.shooting = true;
    };

    Rogue.prototype.stop_shooting = function() {
      return this.shooting = false;
    };

    Rogue.prototype.right_arm_vector = function() {
      if (this.shooting) {
        return Vector.fromPolar(this.height * 0.3, this.dir).plus(new Vector(0, this.height / 4 * (1 - (this.age - this.last_shot) / 10)));
      } else {
        return Rogue.__super__.right_arm_vector.apply(this, arguments);
      }
    };

    return Rogue;

  })(Character);

  WALL_HEIGHT = 50;

  Wall = (function() {
    function Wall(pos1, width, height) {
      this.pos = pos1;
      this.width = width;
      this.height = height;
    }

    Wall.prototype.create_reader = function() {
      return {
        pos: this.pos,
        width: this.width,
        height: this.height
      };
    };

    Wall.prototype.render = function(render_context) {
      var canvas, ctx, stone_asset, stone_top_asset;
      ctx = render_context.ctx, canvas = render_context.canvas, stone_asset = render_context.stone_asset, stone_top_asset = render_context.stone_top_asset;
      ctx.fillStyle = stone_asset;
      ctx.fillRect(this.pos.x, this.pos.y + this.height - WALL_HEIGHT, this.width, WALL_HEIGHT);
      ctx.fillStyle = stone_top_asset;
      return ctx.fillRect(this.pos.x, this.pos.y - WALL_HEIGHT, this.width, this.height);
    };

    return Wall;

  })();

  allied_positions = [new Vector(50, 50), new Vector(50, 100), new Vector(100, 50), new Vector(100, 100)];

  instantiate_character = function(template, index, allegiance) {
    var index_positions;
    if (allegiance) {
      index_positions = allied_positions;
    } else {
      index_positions = allied_positions.map(function(x) {
        return new Vector(BOARD_WIDTH, BOARD_HEIGHT).minus(x);
      });
    }
    switch (template["class"]) {
      case 'Mage':
        return new Mage(50, 10, index_positions[index].clone(), allegiance, template.ai);
      case 'Knight':
        return new Knight(50, 10, index_positions[index].clone(), allegiance, template.ai);
      case 'Rogue':
        return new Rogue(50, 10, index_positions[index].clone(), allegiance, template.ai);
      case 'Archer':
        return new Archer(50, 10, index_positions[index].clone(), allegiance, template.ai);
    }
  };

  BOARD_HEIGHT = 750;

  BOARD_WIDTH = 1500;

  character_templates = [0, 0, 0, 0];

  enemy_templates = [0, 0, 0, 0];

  keysdown = {};

  document.body.addEventListener('keydown', function(event) {
    return keysdown[event.which] = true;
  });

  document.body.addEventListener('keyup', function(event) {
    return keysdown[event.which] = false;
  });

  play_game = function(enemy_name, enemies) {
    var bullets, canvas, char_listeners, characters, contexts, countdown, countdown_covering, countdown_number, ctx, desired_pos, dirt_asset, entities, entity, fn, grass_asset, grass_spots, i, j, k, l, len, len1, len2, m, main_character, mousedown_handler, mousemove_listener, mouseup_handler, moving_target, n, new_walls, none_canvas, none_ctx, q, quit_canvas, quit_ctx, quit_listener, ref, render_context, rerender_ingame_selects, results, should_continue_tick, spectate_listener, spells, spot, terminate, tile_height, tile_width, translate_vector, wall, walls;
    document.getElementById('play-screen').style.display = 'block';
    document.getElementById('main-menu').style.display = 'none';
    document.getElementById('edit-screen').style.display = 'none';
    document.getElementById('other-name').innerText = generate_name(enemy_name);
    document.getElementById('self-name').innerText = generate_name(CURRENT_USER.uid);
    for (i = j = 0; j < 4; i = ++j) {
      document.getElementById("self-" + (i + 1)).style.backgroundImage = "url(" + IMAGE_URLS[SCRIPTS[character_templates[i]]["class"]] + ")";
      document.getElementById("other-" + (i + 1)).style.backgroundImage = "url(evil-" + IMAGE_URLS[enemies[i].type_string] + ")";
    }
    canvas = document.getElementById('viewport');
    ctx = canvas.getContext('2d');
    render_context = new RenderContext(canvas, ctx);
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    none_canvas = document.getElementById('spectate-canvas');
    none_ctx = none_canvas.getContext('2d');
    none_ctx.resetTransform();
    none_ctx.clearRect(0, 0, none_canvas.width, none_canvas.height);
    none_ctx.translate(none_canvas.width / 2, none_canvas.height / 2);
    none_ctx.rotate(Math.PI / 4);
    none_ctx.strokeStyle = '#F00';
    none_ctx.lineWidth = 5;
    none_ctx.beginPath();
    none_ctx.arc(0, 0, 20, 0, 2 * Math.PI);
    none_ctx.moveTo(20, 0);
    none_ctx.lineTo(-20, 0);
    none_ctx.stroke();
    quit_canvas = document.getElementById('quit-canvas');
    quit_ctx = quit_canvas.getContext('2d');
    quit_ctx.clearRect(0, 0, quit_canvas.width, quit_canvas.height);
    quit_ctx.fillStyle = '#FFF';
    quit_ctx.fillRect(15, 10, 30, 20);
    quit_ctx.fillStyle = 'brown';
    quit_ctx.fillRect(10, 10, 5, 50);
    tile_width = canvas.width / 40;
    tile_height = canvas.height / 20;
    characters = character_templates.map(function(x, i) {
      return instantiate_character(SCRIPTS[x], i, true);
    });
    characters = characters.concat(enemies);
    countdown_covering = document.getElementById('countdown-screen');
    countdown_number = document.getElementById('countdown-number');
    countdown_covering.style.display = 'block';
    should_continue_tick = true;
    main_character = null;
    bullets = [];
    walls = [new Wall(new Vector(300, 500), 700, 30)];
    dirt_asset = ctx.createPattern(document.getElementById('dirt-asset'), 'repeat');
    new_walls = [];
    for (k = 0, len = walls.length; k < len; k++) {
      wall = walls[k];
      new_walls.push(wall);
      new_walls.push(new Wall(new Vector(BOARD_WIDTH - (wall.pos.x + wall.width), BOARD_HEIGHT - (wall.pos.y + wall.height)), wall.width, wall.height));
    }
    walls = new_walls;
    grass_spots = (function() {
      results = [];
      for (var l = 1, ref = Math.floor(Math.random() * 20 + 10); 1 <= ref ? l <= ref : l >= ref; 1 <= ref ? l++ : l--){ results.push(l); }
      return results;
    }).apply(this).map(function() {
      return new Vector(Math.random() * (BOARD_WIDTH - 100), Math.random() * (BOARD_HEIGHT - 100));
    });
    grass_asset = document.getElementById('grass-asset');
    translate_vector = new Vector(0, 0);
    spells = characters.filter(function(x) {
      return x instanceof Mage;
    }).map(function(x) {
      return x.spell;
    });
    char_listeners = [];
    fn = function(i) {
      return document.getElementById("char-" + i).addEventListener('click', char_listeners[i] = function() {
        if (main_character) {
          main_character.player_controlled = false;
        }
        main_character = characters[i - 1];
        main_character.player_controlled = true;
        return rerender_ingame_selects();
      });
    };
    for (i = m = 1; m <= 4; i = ++m) {
      fn(i);
    }
    document.getElementById('spectate').addEventListener('click', spectate_listener = function() {
      if (main_character) {
        main_character.player_controlled = false;
      }
      return main_character = null;
    });
    document.getElementById('quit').addEventListener('click', quit_listener = function() {
      should_continue_tick = false;
      terminate();
      return lose_screen();
    });
    desired_pos = new Vector(canvas.width / 2, canvas.height / 2);
    canvas.addEventListener('mousemove', mousemove_listener = function(event) {
      return desired_pos = new Vector(event.offsetX, event.offsetY);
    });
    moving_target = null;
    canvas.oncontextmenu = function(e) {
      e.preventDefault();
      return false;
    };
    ctx.fillStyle = dirt_asset;
    ctx.fillRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);
    for (n = 0, len1 = grass_spots.length; n < len1; n++) {
      spot = grass_spots[n];
      ctx.drawImage(grass_asset, spot.x, spot.y);
    }
    entities = characters.concat(walls).sort(function(a, b) {
      if (a.pos.y > b.pos.y) {
        return 1;
      } else {
        return -1;
      }
    });
    for (q = 0, len2 = entities.length; q < len2; q++) {
      entity = entities[q];
      if ((entity.health == null) || entity.health > 0) {
        entity.render(render_context);
      }
    }
    canvas.addEventListener('mousedown', mousedown_handler = function(event) {
      if (event.which === 3) {
        moving_target = new Vector(event.offsetX, event.offsetY).minus(translate_vector);
        event.preventDefault();
        return false;
      }
      if (main_character instanceof Knight) {
        return main_character.strike();
      } else if (main_character instanceof Archer) {
        return main_character.nock();
      } else if (main_character instanceof Rogue) {
        return main_character.start_shooting();
      } else if (main_character instanceof Mage) {
        return main_character.cast(new Vector(event.offsetX, event.offsetY).minus(translate_vector));
      }
    });
    document.body.addEventListener('mouseup', mouseup_handler = function(event) {
      var result;
      if (main_character instanceof Archer) {
        result = main_character.loose();
        if (result) {
          return bullets.push(result);
        }
      } else if (main_character instanceof Rogue) {
        return main_character.stop_shooting();
      } else if (main_character instanceof Mage) {
        return main_character.cancel_casting();
      }
    });
    terminate = function() {
      var fn1, r;
      canvas.removeEventListener('mousedown', mousedown_handler);
      canvas.removeEventListener('mouseup', mouseup_handler);
      fn1 = function(i) {
        return document.getElementById("char-" + i).removeEventListener('click', char_listeners[i]);
      };
      for (i = r = 1; r <= 4; i = ++r) {
        fn1(i);
      }
      document.getElementById('spectate').removeEventListener('click', spectate_listener);
      return document.getElementById('quit').removeEventListener('click', quit_listener);
    };
    contexts = [1, 2, 3, 4].map(function(i) {
      var small_canvas, small_ctx;
      small_canvas = document.getElementById("canvas-" + i);
      small_ctx = small_canvas.getContext('2d');
      return new RenderContext(small_canvas, small_ctx);
    });
    rerender_ingame_selects = function() {
      var context, len3, r, results1;
      results1 = [];
      for (i = r = 0, len3 = contexts.length; r < len3; i = ++r) {
        context = contexts[i];
        context.ctx.resetTransform();
        context.ctx.clearRect(0, 0, context.canvas.width, context.canvas.height);
        if (characters[i].health <= 0) {
          context.canvas.style.opacity = '0.3';
        } else {
          context.canvas.style.opacity = '1';
        }
        context.ctx.translate(-characters[i].pos.x + context.canvas.width / 2, -characters[i].pos.y + characters[i].height + 35);
        results1.push(characters[i].render(context));
      }
      return results1;
    };
    rerender_ingame_selects();
    countdown = function(secs) {
      var tick;
      if (secs > 0) {
        countdown_number.innerText = secs.toString();
        setTimeout((function() {
          return countdown(secs - 1);
        }), 1000);
        return;
      }
      countdown_covering.style.display = 'none';
      tick = function() {
        var bottom_intersect, bullet, character, desired_dir, distances, i1, j1, k1, left_intersect, len10, len11, len12, len3, len4, len5, len6, len7, len8, len9, min_dist, new_bullets, normalized_delta, prototype_vector, r, ref1, ref2, result, right_intersect, spell, t, target, top_intersect, u, v, w, y, z;
        if (desired_pos.x < 50) {
          translate_vector.x += Math.sqrt(50 - desired_pos.x);
        }
        if (desired_pos.x > canvas.width - 50) {
          translate_vector.x -= Math.sqrt(desired_pos.x - (canvas.width - 50));
        }
        if (desired_pos.y < 50) {
          translate_vector.y += Math.sqrt(50 - desired_pos.y);
        }
        if (desired_pos.y > canvas.height - 50) {
          translate_vector.y -= Math.sqrt(desired_pos.y - (canvas.height - 50));
        }
        rerender_ingame_selects();
        translate_vector.x = -Math.max(-50, Math.min(BOARD_WIDTH + 50 - canvas.width, -translate_vector.x));
        translate_vector.y = -Math.max(-50, Math.min(BOARD_HEIGHT + 50 - canvas.height, -translate_vector.y));
        if (characters.filter(function(x) {
          return x.health > 0 && x.allegiance;
        }).length === 0) {
          characters.forEach(function(x) {
            return x.ai_runner.terminate();
          });
          terminate();
          return lose_screen();
        } else if (characters.filter(function(x) {
          return x.health > 0 && !x.allegiance;
        }).length === 0) {
          characters.forEach(function(x) {
            return x.ai_runner.terminate();
          });
          terminate();
          return win_screen();
        } else if (should_continue_tick) {
          setTimeout(tick, 1000 / FRAME_RATE);
        }
        ctx.resetTransform();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        if (main_character) {
          desired_dir = desired_pos.minus(translate_vector).minus(main_character.pos.minus(new Vector(0, main_character.height))).dir();
          normalized_delta = wrap_angle(desired_dir - main_character.dir);
          main_character.angular_dir = 10 * normalized_delta / Math.PI;
          prototype_vector = new Vector(0, 0);
          main_character.moving = false;
          if (keysdown[key_codes.w]) {
            main_character.moving = true;
            prototype_vector.y -= 1;
          }
          if (keysdown[key_codes.s]) {
            main_character.moving = true;
            prototype_vector.y += 1;
          }
          if (keysdown[key_codes.a]) {
            main_character.moving = true;
            prototype_vector.x -= 1;
          }
          if (keysdown[key_codes.d]) {
            main_character.moving = true;
            prototype_vector.x += 1;
          }
          if (main_character.moving) {
            main_character.movement_dir = prototype_vector.dir();
          }
        }
        ctx.translate(translate_vector.x, translate_vector.y);
        ctx.fillStyle = dirt_asset;
        ctx.fillRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);
        for (r = 0, len3 = grass_spots.length; r < len3; r++) {
          spot = grass_spots[r];
          ctx.drawImage(grass_asset, spot.x, spot.y);
        }
        for (t = 0, len4 = spells.length; t < len4; t++) {
          spell = spells[t];
          spell.tick();
          spell.render(render_context);
        }
        for (u = 0, len5 = characters.length; u < len5; u++) {
          character = characters[u];
          if (!(character.health > 0)) {
            continue;
          }
          for (v = 0, len6 = spells.length; v < len6; v++) {
            spell = spells[v];
            if (spell.alive && spell.burning && character.pos.minus(spell.pos).magnitude() < SPELL_RADIUS) {
              character.damage(1);
            }
          }
          if (character.striking_sideways) {
            for (w = 0, len7 = characters.length; w < len7; w++) {
              target = characters[w];
              if (target !== character && character.health > 0) {
                if (character.pos.minus(target.pos).magnitude() < character.radius * 4 + target.radius && Math.abs(wrap_angle(target.pos.minus(character.pos).dir() - character.dir)) < Math.PI / 2) {
                  target.damage(3);
                }
              }
            }
          }
          result = character.tick({
            characters: characters,
            walls: walls,
            spells: spells,
            bullets: bullets
          });
          if (character.pos.x < character.hitbox_radius) {
            character.pos.x = character.hitbox_radius;
          }
          if (character.pos.x > BOARD_WIDTH - character.hitbox_radius) {
            character.pos.x = BOARD_WIDTH - character.hitbox_radius;
          }
          if (character.pos.y < character.hitbox_radius) {
            character.pos.y = character.hitbox_radius;
          }
          if (character.pos.y > BOARD_HEIGHT - character.hitbox_radius) {
            character.pos.y = BOARD_HEIGHT - character.hitbox_radius;
          }
          for (y = 0, len8 = walls.length; y < len8; y++) {
            wall = walls[y];
            if (wall.pos.x < character.pos.x + character.hitbox_radius && character.pos.x - character.hitbox_radius < wall.pos.x + wall.width && wall.pos.y < character.pos.y + character.hitbox_radius && character.pos.y - character.hitbox_radius < wall.pos.y + wall.height) {
              bottom_intersect = new Vector(character.pos.x, wall.pos.y + wall.height + character.hitbox_radius);
              top_intersect = new Vector(character.pos.x, wall.pos.y - character.hitbox_radius);
              right_intersect = new Vector(wall.pos.x + wall.width + character.hitbox_radius, character.pos.y);
              left_intersect = new Vector(wall.pos.x - character.hitbox_radius, character.pos.y);
              distances = [bottom_intersect, top_intersect, right_intersect, left_intersect].map(function(p) {
                return p.minus(character.pos).magnitude();
              });
              min_dist = Math.min.apply(window, distances);
              if (min_dist === distances[0]) {
                character.pos.copy(bottom_intersect);
                continue;
              }
              if (min_dist === distances[1]) {
                character.pos.copy(top_intersect);
                continue;
              }
              if (min_dist === distances[2]) {
                character.pos.copy(right_intersect);
                continue;
              }
              if (min_dist === distances[3]) {
                character.pos.copy(left_intersect);
                continue;
              }
            }
          }
          if (result) {
            bullets.push(result);
          }
        }
        entities = characters.concat(walls).sort(function(a, b) {
          if (a.pos.y > b.pos.y) {
            return 1;
          } else {
            return -1;
          }
        });
        for (z = 0, len9 = entities.length; z < len9; z++) {
          entity = entities[z];
          if ((entity.health == null) || entity.health > 0) {
            entity.render(render_context);
          }
        }
        new_bullets = [];
        for (i1 = 0, len10 = bullets.length; i1 < len10; i1++) {
          bullet = bullets[i1];
          bullet.tick();
          bullet.render(render_context);
          for (j1 = 0, len11 = characters.length; j1 < len11; j1++) {
            character = characters[j1];
            if (character.health > 0) {
              if (bullet.pos.minus(character.pos).magnitude() < character.hitbox_radius) {
                character.damage(bullet.damage);
                bullet.alive = false;
                continue;
              }
            }
          }
          for (k1 = 0, len12 = walls.length; k1 < len12; k1++) {
            wall = walls[k1];
            if ((wall.pos.x < (ref1 = bullet.pos.x) && ref1 < wall.pos.x + wall.width) && (wall.pos.y < (ref2 = bullet.pos.y) && ref2 < wall.pos.y + wall.height)) {
              bullet.alive = false;
              continue;
            }
          }
          if (bullet.alive) {
            new_bullets.push(bullet);
          }
        }
        return bullets = new_bullets;
      };
      return tick();
    };
    return countdown(3);
  };

  create_ai_from_template = function(program) {
    return "var me;\n\nfunction wrap_angle(ang) {\n    return (((ang + Math.PI) % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI)) - Math.PI\n}\n\nfunction Vector(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nVector.prototype.plus = function(o) {\n    return new Vector(this.x + o.x, this.y + o.y);\n};\n\nVector.prototype.minus = function(o) {\n    return new Vector(this.x - o.x, this.y - o.y);\n};\n\nVector.prototype.times = function(s) {\n    return new Vector(this.x * s, this.y * s);\n};\n\nVector.prototype.divided_by = function(s) {\n    return new Vector(this.x / s, this.y / s);\n};\n\nVector.prototype.magnitude = function() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n};\n\nVector.prototype.dir_to = function(other) {\n    if (other.pos) other = other.pos;\n    return other.minus(this).dir();\n}\n\nVector.prototype.distance = function(other) {\n    if (other.pos) other = other.pos;\n    return this.minus(other).magnitude();\n}\n\nVector.prototype.unit = function() {\n  return this.divided_by(this.magnitude());\n};\n\nVector.prototype.dir = function() {\n  return Math.atan2(this.y, this.x);\n};\n\nfunction move(dir) {\n    postMessage({type: 'move', dir: dir})\n}\nfunction move_toward(pos) {\n    postMessage({type: 'move', dir: me.dir_to(pos)});\n}\nfunction turn(dir) {\n    postMessage({type: 'turn', dir: dir})\n}\nfunction turn_to(dir) {\n    normalized_delta = wrap_angle(dir - me.dir);\n    turn(10 * normalized_delta / Math.PI);\n}\nfunction turn_toward(pos) {\n    var desired_dir = me.dir_to(pos);\n    turn_to(desired_dir)\n}\nfunction strike() {\n    postMessage({type: 'strike'})\n}\nfunction start_shooting() {\n    postMessage({type: 'start_shooting'})\n}\nfunction stop_shooting() {\n    postMessage({type: 'stop_shooting'})\n}\nfunction nock() {\n    postMessage({type: 'nock'})\n}\nfunction loose() {\n    postMessage({type: 'loose'})\n}\nfunction cast(target) {\n    postMessage({type: 'cast', target: target})\n}\nfunction cancel_casting() {\n    postMessage({type: 'cancel_casting'})\n}\n\nfunction unpack(obj) {\n    if (obj.pos) {\n        obj.pos = new Vector(obj.pos.x, obj.pos.y)\n        obj.distance = function(x) { return obj.pos.distance(x); };\n        obj.dir_to = function(x) { return obj.pos.dir_to(x); };\n    }\n    if (obj.velocity) {\n        obj.velocity = new Vector(obj.velocity.x, obj.velocity.y)\n    }\n    return obj;\n}\n\nfunction closest_among(various) {\n    var min_dist = Infinity;\n    var closest = null;\n    for (var i = 0; i < various.length; i++) {\n        var candidate_dist = me.distance(various[i]);\n        if (candidate_dist < min_dist) {\n            min_dist = candidate_dist;\n            closest = various[i];\n        }\n    }\n    return closest;\n}\n\nvar _characters, _bullets, _spells, _walls, _enemies, _allies;\n\nfunction characters() {\n    return _characters;\n}\nfunction bullets() {\n    return _bullets;\n}\nfunction walls() {\n    return _walls;\n}\nfunction spells() {\n    return _spells;\n}\nfunction enemies() {\n    return _enemies;\n}\nfunction allies() {\n    return _allies;\n}\n\nonmessage = function(e) {\n    var info = e.data;\n    _characters = info.characters.map(unpack);\n    _bullets = info.bullets.map(unpack);\n    _spells = info.spells.map(unpack);\n    _walls = info.walls.map(unpack);\n\n    _enemies = _characters.filter(function(x) { return !x.allegiance; });\n    _allies = _characters.filter(function(x) { return x.allegiance; });\n\n    me = unpack(info.main_character);\n\n    (function() {\n    " + program + "\n    }());\n\n    postMessage({type: 'ready'})\n}";
  };

  DUMBO = 'if (Math.random() < 1 / 60) {\n    direction = Math.random() * 2 * Math.PI;\n    move(direction);\n}';

  ROGUE_AI = '// Basic Rogue AI; chases and shoots at enemies.\nvar target = closest_among(enemies());\nturn_toward(target);\nmove_toward(target);\nstart_shooting();';

  KNIGHT_AI = '// Basic Knight AI; chases and hits enemies.\nvar target = closest_among(enemies());\nturn_toward(target);\nmove_toward(target);\nif (me.distance(target) <= 55) {\n    strike();\n}';

  MAGE_AI = '// Basic Rogue AI; casts spells at enemies.\nvar target = closest_among(enemies());\ncast(target.pos);';

  ARCHER_AI = '// Basic Archer AI; shoots at enemies.\nvar target = closest_among(enemies());\nturn_toward(target);\nif (me.ready_to_shoot) {\n    loose();\n}\nelse {\n    nock();\n}';

  DEFAULT_COLORS = {
    pants: 'black',
    torso: 'chocolate',
    torso_top: 'brown',
    arms: 'black',
    head: 'tan'
  };

  NECK_HEIGHT = 10;

  FRICTION = 0.8;

  ANGULAR_FRICTION = 0.5;

  TORSO_PROPORTION = 0.4;

  key_codes = {
    w: 87,
    s: 83,
    a: 65,
    d: 68
  };

  FRAME_RATE = 60;

  WALKING_PERIOD = 50;

  WALKING_RATIO = 0.7;

  SHIELD_RATIO = 0.7;

  Script = (function() {
    function Script(name, _class, ai) {
      this.name = name;
      this["class"] = _class;
      this.ai = ai;
    }

    return Script;

  })();

  SCRIPTS = [new Script('Basic', 'Mage', MAGE_AI), new Script('Basic', 'Knight', KNIGHT_AI), new Script('Basic', 'Archer', ARCHER_AI), new Script('Basic', 'Rogue', ROGUE_AI)];

  database = firebase.database();

  load_scripts = function() {
    return database.ref("/scripts/" + CURRENT_USER.uid).once('value').then(function(snapshot) {
      if (snapshot.val() === null) {
        SCRIPTS = [new Script('Basic', 'Mage', MAGE_AI), new Script('Basic', 'Knight', KNIGHT_AI), new Script('Basic', 'Archer', ARCHER_AI), new Script('Basic', 'Rogue', ROGUE_AI)];
      } else {
        SCRIPTS = snapshot.val().map(function(x) {
          return new Script(x[0], x[1], x[2]);
        });
      }
      ace_editor.setValue(SCRIPTS[character_templates[currently_editing]].ai, -1);
      return update_prototype_list();
    });
  };

  load_settings = function() {
    return database.ref("/settings/" + CURRENT_USER.uid).once('value').then(function(snapshot) {
      var ref, ref1, val;
      val = snapshot.val();
      character_templates = (ref = val != null ? val.character_templates : void 0) != null ? ref : [0, 0, 0, 0];
      enemy_templates = (ref1 = val != null ? val.enemy_templates : void 0) != null ? ref1 : [0, 0, 0, 0];
      ace_editor.setValue(SCRIPTS[character_templates[currently_editing]].ai, -1);
      rerender_tabs();
      return rerender_enemy_tabs();
    });
  };

  'ARCHETYPES = {\n    \'Mage\': new Mage(50, 10, new Vector(25, 85), false)\n    \'Archer\': new Archer(50, 10, new Vector(25, 85), false)\n    \'Knight\': new Knight(50, 10, new Vector(25, 85), false)\n    \'Rogue\': new Rogue(50, 10, new Vector(25, 85), false)\n}';

  win_screen = function() {
    return document.getElementById('win-screen').style.display = 'block';
  };

  lose_screen = function() {
    return document.getElementById('lose-screen').style.display = 'block';
  };

  main_menu = function() {
    document.getElementById('play-screen').style.display = 'none';
    document.getElementById('win-screen').style.display = 'none';
    document.getElementById('edit-screen').style.display = 'none';
    document.getElementById('lose-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('signin').style.display = 'none';
    document.getElementById('registration').style.display = 'none';
    return document.getElementById('main-menu-floater').style.display = 'block';
  };

  login_screen = function() {
    document.getElementById('play-screen').style.display = 'none';
    document.getElementById('win-screen').style.display = 'none';
    document.getElementById('edit-screen').style.display = 'none';
    document.getElementById('lose-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('signin').style.display = 'block';
    document.getElementById('registration').style.display = 'none';
    return document.getElementById('main-menu-floater').style.display = 'none';
  };

  registration_screen = function() {
    document.getElementById('play-screen').style.display = 'none';
    document.getElementById('win-screen').style.display = 'none';
    document.getElementById('edit-screen').style.display = 'none';
    document.getElementById('lose-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('signin').style.display = 'none';
    document.getElementById('registration').style.display = 'block';
    return document.getElementById('main-menu-floater').style.display = 'none';
  };

  edit_element = document.getElementById('edit-editor');

  edit_element.oncontextmenu = function(event) {
    return event.stopPropagation();
  };

  ace_editor = new droplet.Editor(edit_element, {
    mode: 'javascript',
    viewSettings: {
      padding: 10,
      textPadding: 5,
      colors: {
        value: "#94c096",
        assign: "#f3a55d",
        declaration: "#f3a55d",
        type: "#f3a55d",
        control: "#ecc35b",
        "function": "#b593e6",
        functionCall: "#889ee3",
        logic: "#6fc2eb",
        struct: "#f58c4f",
        "return": "#b593e6"
      }
    },
    modeOptions: {
      functions: {
        'closest_among': {
          color: 'value',
          value: 'true'
        },
        'turn_toward': {
          color: 'command'
        },
        'turn_to': {
          color: 'command'
        },
        'turn': {
          color: 'command'
        },
        'move': {
          color: 'command'
        },
        'move_toward': {
          color: 'command'
        },
        'start_shooting': {
          color: 'command'
        },
        'stop_shooting': {
          color: 'command'
        },
        'strike': {
          color: 'command'
        },
        'cast': {
          color: 'command'
        },
        'nock': {
          color: 'command'
        },
        'loose': {
          color: 'command'
        },
        '*.distance': {
          color: 'value',
          value: true
        },
        '*.dir_to': {
          color: 'value',
          value: true
        },
        '*.minus': {
          color: 'value',
          value: true
        },
        '*.plus': {
          color: 'value',
          value: true
        },
        '*.magnitude': {
          color: 'value',
          value: true
        },
        '*.dir': {
          color: 'value',
          value: true
        },
        '*.health': {
          color: 'value',
          value: true
        },
        '*.pos': {
          color: 'value',
          value: true
        },
        'enemies': {
          color: 'value',
          value: true
        },
        'allies': {
          color: 'value',
          value: true
        },
        'bullets': {
          color: 'value',
          value: true
        },
        'spells': {
          color: 'value',
          value: true
        },
        '*.times': {
          color: 'value',
          value: true
        },
        '*.filter': {
          color: 'value',
          value: true
        },
        '*.push': {
          color: 'command'
        },
        'wrap_angle': {
          color: 'value',
          value: true
        },
        '*.map': {
          color: 'value',
          value: true
        }
      }
    },
    palette: [
      {
        name: 'Control',
        color: 'orange',
        blocks: [
          {
            block: 'if (condition) {\n  \n}'
          }, {
            block: 'if (condition) {\n  \n} else {\n  \n}'
          }, {
            block: 'for (var i = 0; i < n; i++) {\n  \n}'
          }, {
            block: 'while (condition) {\n  \n}'
          }, {
            block: 'return;'
          }
        ]
      }, {
        name: 'Math',
        color: 'blue',
        blocks: [
          {
            block: 'a + b'
          }, {
            block: 'a - b'
          }, {
            block: 'a * b'
          }, {
            block: 'a / b'
          }, {
            block: 'a > b'
          }, {
            block: 'a >= b'
          }, {
            block: 'a == b'
          }, {
            block: 'a <= b'
          }, {
            block: 'a < b'
          }, {
            block: 'a && b'
          }, {
            block: 'a || b'
          }, {
            block: '!a'
          }
        ]
      }, {
        name: 'Vectors',
        color: 'green',
        blocks: [
          {
            block: 'v.plus(u)'
          }, {
            block: 'v.minus(u)'
          }, {
            block: 'v.times(s)'
          }, {
            block: 'v.dir()'
          }, {
            block: 'v.magnitude()'
          }, {
            block: 'v.dir_to(u)'
          }, {
            block: 'v.distance(u)'
          }, {
            block: 'wrap_angle(x)'
          }
        ]
      }, {
        name: 'Sensing',
        color: 'red',
        blocks: [
          {
            block: 'closest_among(list)'
          }, {
            block: 'enemies()'
          }, {
            block: 'allies()'
          }, {
            block: 'bullets()'
          }, {
            block: 'spells()'
          }, {
            block: 'walls()'
          }, {
            block: 'me.health'
          }, {
            block: 'me.dir'
          }, {
            block: 'me.pos'
          }
        ]
      }, {
        name: 'Commands',
        color: 'purple',
        blocks: [
          {
            block: 'turn_toward(x);'
          }, {
            block: 'turn_to(dir);'
          }, {
            block: 'turn(dir);'
          }, {
            block: 'move(dir);'
          }, {
            block: 'move_toward(x);'
          }, {
            block: 'cast(x);'
          }, {
            block: 'strike();'
          }, {
            block: 'nock();'
          }, {
            block: 'loose();'
          }, {
            block: 'start_shooting();'
          }, {
            block: 'stop_shooting();'
          }
        ]
      }, {
        name: 'Data',
        color: 'yellow',
        blocks: [
          {
            block: 'var x = 0;'
          }, {
            block: 'x = 1;'
          }, {
            block: '[]'
          }, {
            block: 'list[i]'
          }, {
            block: 'x.length'
          }, {
            block: 'list.push(x)'
          }, {
            block: 'list.filter(function(x) {\n  \n})'
          }, {
            block: 'list.map(function(x) {\n  \n})'
          }
        ]
      }
    ]
  });

  ace_editor.setValue(SCRIPTS[character_templates[0]].ai, -1);

  currently_editing = 0;

  prototype_list = document.getElementById('prototype-list');

  enemy_prototype_list = document.getElementById('enemy-prototype-list');

  script_elements = null;

  selected_element = null;

  enemy_script_elements = null;

  enemy_selected_element = null;

  context_menu = document.getElementById('context-menu');

  contexted_element = null;

  contexted_index = null;

  document.body.addEventListener('click', function(event) {
    context_menu.style.display = 'none';
    if (contexted_element != null) {
      contexted_element.className = contexted_element.className.split(' ').filter(function(x) {
        return x !== 'contexted';
      }).join(' ');
    }
    return contexted_element = null;
  });

  document.body.oncontextmenu = function(event) {
    return false;
  };

  update_prototype_list = function() {
    var fn, i, j, k, len, len1, results, script;
    script_elements = [];
    selected_element = null;
    prototype_list.innerHTML = '';
    fn = function(script, i) {
      var element, wrapper;
      element = document.createElement('div');
      element.className = 'script-' + script["class"];
      element.innerText = script.name;
      wrapper = document.createElement('div');
      wrapper.className = 'button';
      wrapper.appendChild(element);
      wrapper.oncontextmenu = function(event) {
        context_menu.style.display = 'block';
        context_menu.style.left = event.clientX;
        context_menu.style.top = event.clientY;
        if (contexted_element != null) {
          contexted_element.className = contexted_element.className.split(' ').filter(function(x) {
            return x !== 'contexted';
          }).join(' ');
        }
        wrapper.className += ' contexted';
        console.log('setting contexted element to', wrapper);
        contexted_element = wrapper;
        contexted_index = i;
        return false;
      };
      script_elements.push(wrapper);
      prototype_list.appendChild(wrapper);
      return element.addEventListener('click', function() {
        if (selected_element != null) {
          selected_element.className = selected_element.className.split(' ')[0];
        }
        wrapper.className += ' selected';
        selected_element = wrapper;
        character_templates[currently_editing] = i;
        save_settings();
        ace_editor.setValue(SCRIPTS[i].ai, -1);
        return rerender_tabs();
      });
    };
    for (i = j = 0, len = SCRIPTS.length; j < len; i = ++j) {
      script = SCRIPTS[i];
      fn(script, i);
    }
    enemy_script_elements = [];
    enemy_selected_element = null;
    enemy_prototype_list.innerHTML = '';
    results = [];
    for (i = k = 0, len1 = SCRIPTS.length; k < len1; i = ++k) {
      script = SCRIPTS[i];
      results.push((function(script, i) {
        var element, wrapper;
        element = document.createElement('div');
        element.className = 'script-' + script["class"];
        element.innerText = script.name;
        wrapper = document.createElement('div');
        wrapper.className = 'button';
        wrapper.appendChild(element);
        enemy_script_elements.push(wrapper);
        enemy_prototype_list.appendChild(wrapper);
        return element.addEventListener('click', function() {
          if (enemy_selected_element != null) {
            enemy_selected_element.className = selected_element.className.split(' ')[0];
          }
          wrapper.className += ' selected';
          enemy_selected_element = wrapper;
          enemy_templates[enemy_currently_editing] = i;
          save_settings();
          return rerender_enemy_tabs();
        });
      })(script, i));
    }
    return results;
  };

  update_prototype_list();

  database = firebase.database();

  save_timeout = null;

  save = function() {
    if (save_timeout != null) {
      clearTimeout(save_timeout);
    }
    return save_timeout = setTimeout((function() {
      return database.ref("/scripts/" + CURRENT_USER.uid).set(SCRIPTS.map(function(x) {
        return [x.name, x["class"], x.ai];
      }));
    }), 150);
  };

  save_settings_timeout = null;

  save_settings = function() {
    if (save_settings_timeout != null) {
      clearTimeout(save_settings_timeout);
    }
    return save_settings_timeout = setTimeout((function() {
      return database.ref("/settings/" + CURRENT_USER.uid).set({
        character_templates: character_templates,
        enemy_templates: enemy_templates
      });
    }), 150);
  };

  ace_editor.on('change', function() {
    SCRIPTS[character_templates[currently_editing]].ai = ace_editor.getValue();
    return save();
  });

  ace_editor.aceEditor.on('change', function() {
    SCRIPTS[character_templates[currently_editing]].ai = ace_editor.getValue();
    return save();
  });

  CURRENT_MODE = 'PRACTICE';

  edit_screen = function(from) {
    CURRENT_MODE = from;
    document.getElementById('edit-screen-header').innerText = from;
    if (from === 'PRACTICE') {
      document.getElementById('edit-choose-enemy').style.display = 'block';
    } else {
      document.getElementById('edit-choose-enemy').style.display = 'none';
    }
    if (from === 'CUSTOM') {
      document.getElementById('begin').innerText = 'CHOOSE ENEMY';
    } else {
      document.getElementById('begin').innerText = 'BEGIN';
    }
    document.getElementById('win-screen').style.display = 'none';
    document.getElementById('edit-screen').style.display = 'block';
    document.getElementById('lose-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'none';
    ace_editor.setValue(SCRIPTS[character_templates[currently_editing]].ai, -1);
    return rerender_tabs();
  };

  IMAGE_URLS = {
    'Mage': 'mage-prototype.png',
    'Knight': 'knight-prototype.png',
    'Rogue': 'rogue-prototype.png',
    'Archer': 'archer-prototype.png',
    'mage': 'mage-prototype.png',
    'knight': 'knight-prototype.png',
    'rogue': 'rogue-prototype.png',
    'archer': 'archer-prototype.png'
  };

  rerender_tabs = function() {
    var i, j, len, results, template;
    results = [];
    for (i = j = 0, len = character_templates.length; j < len; i = ++j) {
      template = character_templates[i];
      results.push(document.getElementById("edit-tab-" + (i + 1)).style.backgroundImage = "url(\"" + IMAGE_URLS[SCRIPTS[template]["class"]] + "\")");
    }
    return results;
  };

  rerender_enemy_tabs = function() {
    var i, j, len, results, template;
    results = [];
    for (i = j = 0, len = enemy_templates.length; j < len; i = ++j) {
      template = enemy_templates[i];
      results.push(document.getElementById("enemy-tab-" + (i + 1)).style.backgroundImage = "url(\"evil-" + IMAGE_URLS[SCRIPTS[template]["class"]] + "\")");
    }
    return results;
  };

  rerender_enemy_tabs();

  edit_tab_elements = [];

  selected_tab_element = null;

  fn = function(i) {
    edit_tab_elements[i] = document.getElementById("edit-tab-" + (i + 1));
    return edit_tab_elements[i].addEventListener('click', function(x) {
      var element;
      selected_tab_element.className = selected_tab_element.className.split(' ')[0];
      selected_tab_element = edit_tab_elements[i];
      selected_tab_element.className += ' selected-tab';
      currently_editing = i;
      element = script_elements[character_templates[i]];
      if (selected_element != null) {
        selected_element.className = selected_element.className.split(' ')[0];
      }
      element.className += ' selected';
      selected_element = element;
      return ace_editor.setValue(SCRIPTS[character_templates[i]].ai, -1);
    });
  };
  for (i = j = 0; j < 4; i = ++j) {
    fn(i);
  }

  enemy_currently_editing = 0;

  enemy_tab_elements = [];

  enemy_selected_tab_element = null;

  fn1 = function(i) {
    enemy_tab_elements[i] = document.getElementById("enemy-tab-" + (i + 1));
    return enemy_tab_elements[i].addEventListener('click', function(x) {
      var element;
      enemy_selected_tab_element.className = enemy_selected_tab_element.className.split(' ')[0];
      enemy_selected_tab_element = enemy_tab_elements[i];
      enemy_selected_tab_element.className += ' selected-tab';
      enemy_currently_editing = i;
      element = enemy_script_elements[enemy_templates[i]];
      if (enemy_selected_element != null) {
        enemy_selected_element.className = enemy_selected_element.className.split(' ')[0];
      }
      element.className += ' selected';
      return enemy_selected_element = element;
    });
  };
  for (i = k = 0; k < 4; i = ++k) {
    fn1(i);
  }

  element = enemy_script_elements[enemy_templates[0]];

  if (enemy_selected_element != null) {
    enemy_selected_element.className = enemy_selected_element.className.split(' ')[0];
  }

  enemy_selected_element = element;

  element.className += ' selected';

  element = script_elements[character_templates[0]];

  if (selected_element != null) {
    selected_element.className = selected_element.className.split(' ')[0];
  }

  selected_element = element;

  element.className += ' selected';

  selected_tab_element = edit_tab_elements[0];

  enemy_selected_tab_element = enemy_tab_elements[0];

  document.getElementById('main-menu-win').addEventListener('click', main_menu);

  document.getElementById('main-menu-lose').addEventListener('click', main_menu);

  document.getElementById('practice').addEventListener('click', function() {
    return edit_screen('PRACTICE');
  });

  document.getElementById('random').addEventListener('click', function() {
    return edit_screen('RANDOM');
  });

  document.getElementById('custom').addEventListener('click', function() {
    return edit_screen('CUSTOM');
  });

  document.getElementById('begin').addEventListener('click', function() {
    if (CURRENT_MODE === 'PRACTICE') {
      return play_game(CURRENT_USER.uid, enemy_templates.map(function(x, i) {
        return instantiate_character(SCRIPTS[x], i, false);
      }));
    } else if (CURRENT_MODE === 'RANDOM') {
      return database.ref('/settings').once('value').then(function(e) {
        var candidates, chosen_opponent, key, settings;
        settings = e.val();
        candidates = [];
        for (key in settings) {
          if (key !== CURRENT_USER.uid) {
            candidates.push(key);
          }
        }
        chosen_opponent = candidates[Math.floor(Math.random() * candidates.length)];
        return database.ref("/scripts/" + chosen_opponent).once('value').then(function(script_snapshot) {
          var enemy_scripts;
          enemy_scripts = script_snapshot.val().map(function(x) {
            return new Script(x[0], x[1], x[2]);
          });
          return play_game(chosen_opponent, settings[chosen_opponent].character_templates.map(function(x, i) {
            console.log(enemy_scripts[x], i);
            return instantiate_character(enemy_scripts[x], i, false);
          }));
        });
      });
    } else {
      alert('oops I do not know how to do that');
    }
  });

  document.getElementById('back').addEventListener('click', main_menu);

  class_elements = {
    'Mage': document.getElementById('mage-select'),
    'Rogue': document.getElementById('rogue-select'),
    'Knight': document.getElementById('knight-select'),
    'Archer': document.getElementById('archer-select')
  };

  selected_class_element = class_elements['Knight'];

  selected_class = 'Knight';

  class_elements['Archer'].addEventListener('click', function() {
    selected_class_element.style.backgroundColor = '';
    selected_class_element = class_elements['Archer'];
    selected_class_element.style.backgroundColor = '#888';
    return selected_class = 'Archer';
  });

  class_elements['Rogue'].addEventListener('click', function() {
    selected_class_element.style.backgroundColor = '';
    selected_class_element = class_elements['Rogue'];
    selected_class_element.style.backgroundColor = '#888';
    return selected_class = 'Rogue';
  });

  class_elements['Knight'].addEventListener('click', function() {
    selected_class_element.style.backgroundColor = '';
    selected_class_element = class_elements['Knight'];
    selected_class_element.style.backgroundColor = '#888';
    return selected_class = 'Knight';
  });

  class_elements['Mage'].addEventListener('click', function() {
    selected_class_element.style.backgroundColor = '';
    selected_class_element = class_elements['Mage'];
    selected_class_element.style.backgroundColor = '#888';
    return selected_class = 'Mage';
  });

  document.getElementById('new').addEventListener('click', function() {
    document.getElementById('dialog-screen').style.display = 'block';
    document.getElementById('name').value = '';
    selected_class = 'Knight';
    selected_class_element.style.backgroundColor = '';
    selected_class_element = class_elements['Knight'];
    return selected_class_element.style.backgroundColor = '#888';
  });

  document.getElementById('create').addEventListener('click', function() {
    document.getElementById('dialog-screen').style.display = '';
    SCRIPTS.push(new Script(document.getElementById('name').value, selected_class, ''));
    update_prototype_list();
    return save();
  });

  document.getElementById('delete').addEventListener('click', function() {
    SCRIPTS.splice(contexted_index, 1);
    character_templates = character_templates.map(function(x) {
      if (x >= contexted_index) {
        return x - 1;
      } else {
        return x;
      }
    });
    enemy_templates = enemy_templates.map(function(x) {
      if (x >= contexted_index) {
        return x - 1;
      } else {
        return x;
      }
    });
    save_settings();
    update_prototype_list();
    rerender_tabs();
    return save();
  });

  document.getElementById('registration-link').addEventListener('click', registration_screen);

  document.getElementById('signin-link').addEventListener('click', login_screen);

  document.getElementById('register').addEventListener('click', function() {
    var email, password, retype;
    email = document.getElementById('registration-email').value;
    password = document.getElementById('registration-password').value;
    retype = document.getElementById('registration-retype').value;
    if (password === retype) {
      return firebase.auth().createUserWithEmailAndPassword(email, password)["catch"](function(err) {
        return alert(err);
      });
    } else {
      return alert('passwords are not the same');
    }
  });

  document.getElementById('login').addEventListener('click', function() {
    var email, password;
    email = document.getElementById('email').value;
    password = document.getElementById('password').value;
    return firebase.auth().signInWithEmailAndPassword(email, password)["catch"](function(err) {
      return alert(err);
    });
  });

  github_provider = new firebase.auth.GithubAuthProvider();

  document.getElementById('github-in').addEventListener('click', function() {
    return firebase.auth().signInWithPopup(github_provider)["catch"](function(err) {
      return alert(err);
    });
  });

  google_provider = new firebase.auth.GoogleAuthProvider();

  document.getElementById('google-in').addEventListener('click', function() {
    return firebase.auth().signInWithPopup(google_provider)["catch"](function(err) {
      return alert(err);
    });
  });

  document.getElementById('logout').addEventListener('click', function() {
    return firebase.auth().signOut();
  });

  CURRENT_USER = null;

  firebase.auth().onAuthStateChanged(function(user) {
    if (user) {
      CURRENT_USER = user;
      load_scripts();
      load_settings();
      return main_menu();
    } else {
      return login_screen();
    }
  });

  name_syllables = ['tal', 'til', 'tol', 'al', 'par', 'in', 'kron', 'kor', 'kar', 'kur', 'kir', 'ker', 'tar', 'ter', 'tir', 'tur', 'tor', 'el', 'lan', 'star', 'pril', 'por', 'par', 'pir', 'pyl', 'pros', 'gyr', 'xel', 'tril', 'tris', 'fel', 'fer', 'fen', 'fin'];

  ending_syllables = ['eon', 'on', 'ea', 'ae', 'a', 'us', 'eus', 'ius', 'is', 'os', 'ys'];

  generate_name = function(seed) {
    var l, length, ref, rng, str;
    rng = new Math.seedrandom(seed);
    length = Math.floor(rng() * 4);
    str = '';
    for (l = 1, ref = length; 1 <= ref ? l <= ref : l >= ref; 1 <= ref ? l++ : l--) {
      str += name_syllables[Math.floor(rng() * name_syllables.length)];
    }
    str += ending_syllables[Math.floor(rng() * ending_syllables.length)];
    str = str[0].toUpperCase() + str.slice(1);
    return str;
  };

}).call(this);
